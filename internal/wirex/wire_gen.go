// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wirex

import (
	"finance-tracker/internal/data"
	"finance-tracker/internal/mods/auth/api"
	"finance-tracker/internal/mods/auth/biz"
	"finance-tracker/internal/mods/auth/dal"
	"finance-tracker/pkg/config"
	redis2 "finance-tracker/pkg/redis"
	"github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeDependencies() (*Handlers, error) {
	app := ProvideConfig()
	db := ProvideDatabase(app)
	user := &dal.User{
		DB: db,
	}
	bizUser := biz.User{
		UserDAL: user,
	}
	apiUser := &api.User{
		UserBIZ: bizUser,
	}
	client := ProvideRedis(app)
	login := &biz.Login{
		UserDAL:     user,
		UserBIZ:     bizUser,
		RedisClient: client,
	}
	apiLogin := &api.Login{
		LoginBIZ: login,
	}
	handlers := &Handlers{
		UserApi:  apiUser,
		LoginApi: apiLogin,
	}
	return handlers, nil
}

// wire.go:

type Handlers struct {
	UserApi  *api.User
	LoginApi *api.Login
}

// ProvideConfig menyediakan konfigurasi aplikasi.
func ProvideConfig() config.App {
	return config.LoadConfigs()
}

// ProvideDatabase menyediakan koneksi database.
func ProvideDatabase(cfg config.App) *gorm.DB {
	dsn := "host=" + cfg.DatabaseConfig.Host +
		" user=" + cfg.DatabaseConfig.User +
		" password=" + cfg.DatabaseConfig.Password +
		" dbname=" + cfg.DatabaseConfig.Name +
		" port=" + cfg.DatabaseConfig.Port +
		" sslmode=disable"

	return data.InitDatabase(dsn)
}

func ProvideRedis(cfg config.App) *redis.Client {
	return redis2.NewRedisClient(cfg)
}
